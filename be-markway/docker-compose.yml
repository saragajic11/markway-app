version: '3.4'

services:
  gateway:
    image: ${DOCKER_REGISTRY-}apigateway
    build:
      context: .
      dockerfile: API-Gateway/Dockerfile
    ports:
      - '9090:80'
    depends_on:
      shipments-api:
        condition: service_healthy
    links:
      - shipments-api
    environment:
      - AUTHENTICATIONCONFIGURATION__JWT__AUTHORITY=${JWT_AUTHORITY}
    networks:
      - net_authn
      - net_shipments
      - net_users
  shipments-api:
    image: ${DOCKER_REGISTRY-}shipmentservice
    build:
      context: .
      dockerfile: Shipments/Shipments.Api/Dockerfile
    depends_on:
      postgres_db:
        condition: service_healthy
    ports:
      - '5287:5287'
    environment:
      - SYSTEMCONFIGURATION__JWT__AUTHORITY=${JWT_AUTHORITY}
      - BUILDKIT_PROGRESS=1
      - SYSTEMCONFIGURATION__DATABASECONNECTION=User ID="${MARKWAY_DB_USERNAME}"; Password="${MARKWAY_DB_PASSWORD}"; Host=postgres_db; Database=markway_shipments; Integrated Security=true; Pooling=true;
      - SYSTEMCONFIGURATION__GRPCCONNECTIONS__USER=${GRPC_USERS_SERVICE}
    networks:
      - net_shipments
      - net_users
      - net_authn

  users-api:
    image: ${DOCKER_REGISTRY-}users
    build:
      context: .
      dockerfile: Users/Users.API/Dockerfile
    depends_on:
      postgres_db:
        condition: service_healthy
    ports:
      - '6287:6287'
    environment:
      - BUILDKIT_PROGRESS=1
      - SYSTEMCONFIGURATION__JWT__AUTHORITY=${JWT_AUTHORITY}
      - SYSTEMCONFIGURATION__JWT_TOKENVALIDATION_KEY=${JWT_ISSUER_SIGNING_KEY}
      - SYSTEMCONFIGURATION__DATABASECONNECTION=User ID="${MARKWAY_DB_USERNAME}"; Password="${MARKWAY_DB_PASSWORD}"; Host=postgres_db; Database=markway_users; Integrated Security=true; Pooling=true;
    networks:
      - net_authn
      - net_users

  pdfs-api:
    image: ${DOCKER_REGISTRY-}pdfsservice
    build:
      context: .
      dockerfile: Pdfs/Pdfs.Api/Dockerfile
    ports:
      - '7287:7287'
    depends_on:
      - postgres_db
    environment:
      - SYSTEMCONFIGURATION__JWT__AUTHORITY=${JWT_AUTHORITY}
      - SYSTEMCONFIGURATION__DATABASECONNECTION=User ID="${MARKWAY_DB_USERNAME}"; Password="${MARKWAY_DB_PASSWORD}"; Host=postgres_db; Database=markway_pdfs; Integrated Security=true; Pooling=true;
      - SYSTEMCONFIGURATION__S3SETTINGS__ACCESSKEY=${S3_ACCESS_KEY}
      - SYSTEMCONFIGURATION__S3SETTINGS__ACCESSSECRET=${S3_ACCESS_SECRET}
      - SYSTEMCONFIGURATION__S3SETTINGS__SERVICEURL=${S3_SERVICE_URL}
      - SYSTEMCONFIGURATION__S3SETTINGS__BUCKET=${S3_BUCKET}
      - SYSTEMCONFIGURATION__S3SETTINGS__PUBLICURL=${S3_PUBLIC_URL}
      - SYSTEMCONFIGURATION__S3SETTINGS__REGION=${S3_REGION}
      - SYSTEMCONFIGURATION__GRPCCONNECTIONS__USER=${GRPC_USERS_SERVICE}
      - SYSTEMCONFIGURATION__GRPCCONNECTIONS__NOTIFICATION=${GRPC_NOTIFICATION_SERVICE}
      - SYSTEMCONFIGURATION__GENERATEPDFAPI=${GENERATE_API}
    networks:
      - net_users
  
  notifications-api:
    image: ${DOCKER_REGISTRY-}notifications
    build:
      context: .
      dockerfile: Notification/Notification.Api/Dockerfile
    ports:
      - '8287:8287'
    depends_on:
      - postgres_db
    environment:
      - SYSTEMCONFIGURATION__JWT__AUTHORITY=${JWT_AUTHORITY}
      - SYSTEMCONFIGURATION__DATABASECONNECTION=User ID="${MARKWAY_DB_USERNAME}"; Password="${MARKWAY_DB_PASSWORD}"; Host=postgres_db; Database=markway_notifications; Integrated Security=true; Pooling=true;
      - SYSTEMCONFIGURATION__GRPCCONNECTIONS__USER=${GRPC_USERS_SERVICE}
      - SYSTEMCONFIGURATION__EMAILSERVER__HOST=${EMAILSERVER_HOST}
      - SYSTEMCONFIGURATION__EMAILSERVER__PORT=${EMAILSERVER_PORT}
      - SYSTEMCONFIGURATION__EMAILSERVER__ENABLE_SSL=${EMAILSERVER_ENABLE_SSL}
      - SYSTEMCONFIGURATION__EMAILSERVER__AUTHMODE=${EMAILSERVER_AUTH_MODE}
      - SYSTEMCONFIGURATION__EMAILSERVER__USER=${EMAILSERVER_USER}
      - SYSTEMCONFIGURATION__EMAILSERVER__USERNAME=${EMAILSERVER_USERNAME}
      - SYSTEMCONFIGURATION__EMAILSERVER__PASSWORD=${EMAILSERVER_PASSWORD}
      - SYSTEMCONFIGURATION__ELKCONFIGURATION__URI=${ELASTICSEARCH_HOSTS}
    networks:
      - net_users
    volumes:
      - pdfs_shared_volume:/app/pdf_input

  identity-api:
    image: ${DOCKER_REGISTRY-}authopeniddict
    build:
      context: .
      dockerfile: AuthOpenIddict/Dockerfile
    ports:
      - '5053:80'
    depends_on:
      - postgres_db
    environment:
      - BUILDKIT_PROGRESS=1
      - SYSTEMCONFIGURATION__JWT__AUTHORITY=${JWT_AUTHORITY}
      - SYSTEMCONFIGURATION__JWT_TOKENVALIDATION_KEY=${JWT_ISSUER_SIGNING_KEY}
      - SYSTEMCONFIGURATION__DATABASECONNECTION=User ID="${MARKWAY_DB_USERNAME}"; Password="${MARKWAY_DB_PASSWORD}"; Host=postgres_db; Database=markway_auth; Integrated Security=true; Pooling=true;
      - SYSTEMCONFIGURATION__GRPCCONNECTIONS__USERS=${GRPC_USERS_SERVICE}
    networks:
      - net_authn
      - net_users
  
  generate-pdfs-api:
    image: ${DOCKER_REGISTRY-}generateservice
    build:
      context: GeneratePdf
    ports:
      - '9387:9387'
    networks:
      - net_users
    volumes:
      - pdfs_shared_volume:/app/pdf_output


  postgres_db:
    image: postgres:14.1-alpine
    restart: always
    environment:
      - POSTGRES_USER=${MARKWAY_DB_USERNAME}
      - POSTGRES_PASSWORD=${MARKWAY_DB_PASSWORD}
    ports:
      - '5632:5432'
    volumes:
      - db_postgres:/var/lib/postgresql/data
    networks:
      - net_users
      - net_authn
    healthcheck:
      test:
        [
          'CMD-SHELL',
          "sh -c 'pg_isready -U ${MARKWAY_DB_USERNAME} -d markway_shipments'",
        ]
      interval: 10s
      timeout: 3s
      retries: 5

volumes:
  db_postgres:
    driver: local
  redis:
    driver: local
  elasticsearch-data:
    driver: local
  pdfs_shared_volume:
    driver: local

networks:
  net_users:
    driver: bridge
  net_shipments:
    driver: bridge
  net_authn:
    driver: bridge
